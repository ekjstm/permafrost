* Provide HDF bindings to high-level languages: Java now. 
  C#, Python future possibilities.
* Assessment of existing NCSA Java Bindings

  * Architecture is lacking.
    * Every method call is synchronized.
    * Every method call requires a checked exception. 
      Error handling interface is execrable.
    * Methods that should appear as object members (e.g. setAttribute() 
      are pushed up to the "FileFormat" object as static methods.
    * Problems due in part to excessively tiered development:
      Object interface provides abstraction to JHI5 or JHI. JHI runs on
      libhdf, JHI5 runs on libh5

  * Implementation is lacking. 
    * Unreasonable inheritance from File and DefaultMutableTreeNode
    * Use of abstract classes instead of interfaces
    * Clear lack of understanding class/reflection API. 
     (e.g. parsing x.getClass().toString() to determine the class type)
    * Excessive copying of data -- no options for using direct buffers.
      This is product of developing against the 1.3 JDK rather than 
      anything more modern.

  * Data model easily desynchronizes with underlying data store.
    Object can be incompletely initialized without warning and
    initialization is not completed. Not always clear when a method
    is modifying the in memory model or committing to the store.

  * Percieved lack of development from HDF Group
    * HDF 1.5.8 APIs are not supported.
    * "Advanced" APIs are not supported via the object interface.
      
  * Conclusions
    * NCSA product works okay, but could be improved.
      * Use of direct buffer techniques for no/lazy-copy API 
        in addition to java array API for convenience.
      * Use of interfaces to provide clear seperation of concerns.
      * Use of reflection where applicable to provide a cleaner API.
      * Fully object-oriented API built directly on libh5.
      * General purpose library - no coupling to a specific app.

* Inspiration and lessons learned from          
  * NSCA JHDF/Object
  * PyTables
  * Javolution
  * Sleepycat JavaDB
  